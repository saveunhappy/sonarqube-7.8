// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should edit members 1`] = `
<EditMembers
  group={
    Object {
      "id": 3,
      "membersCount": 5,
      "name": "Foo",
    }
  }
  onEdit={[MockFunction]}
  organization="org"
>
  <ButtonIcon
    className="button-small"
    onClick={[Function]}
  >
    <Button
      className="button-small button-icon"
      onClick={[Function]}
      stopPropagation={true}
      style={
        Object {
          "color": "#236a97",
        }
      }
    >
      <button
        className="button button-small button-icon"
        onClick={[Function]}
        style={
          Object {
            "color": "#236a97",
          }
        }
        type="button"
      >
        <MOCKBulletListIcon />
      </button>
    </Button>
  </ButtonIcon>
</EditMembers>
`;

exports[`should edit members 2`] = `
<EditMembers
  group={
    Object {
      "id": 3,
      "membersCount": 5,
      "name": "Foo",
    }
  }
  onEdit={[MockFunction]}
  organization="org"
>
  <ButtonIcon
    className="button-small"
    onClick={[Function]}
  >
    <Button
      className="button-small button-icon"
      onClick={[Function]}
      stopPropagation={true}
      style={
        Object {
          "color": "#236a97",
        }
      }
    >
      <button
        className="button button-small button-icon"
        onClick={[Function]}
        style={
          Object {
            "color": "#236a97",
          }
        }
        type="button"
      >
        <MOCKBulletListIcon />
      </button>
    </Button>
  </ButtonIcon>
  <EditMembers
    group={
      Object {
        "id": 3,
        "membersCount": 5,
        "name": "Foo",
      }
    }
    onClose={[Function]}
    organization="org"
  >
    <Modal
      contentLabel="users.update"
      onRequestClose={[Function]}
    >
      <Modal
        ariaHideApp={true}
        bodyOpenClassName="ReactModal__Body--open"
        className="modal"
        closeTimeoutMS={0}
        contentLabel="users.update"
        isOpen={true}
        onRequestClose={[Function]}
        overlayClassName="modal-overlay"
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        role="dialog"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
      >
        <Portal
          containerInfo={
            <div
              class="ReactModalPortal"
            >
              <div
                class="ReactModal__Overlay ReactModal__Overlay--after-open modal-overlay"
              >
                <div
                  aria-label="users.update"
                  class="ReactModal__Content ReactModal__Content--after-open modal"
                  role="dialog"
                  tabindex="-1"
                >
                  <header
                    class="modal-head"
                  >
                    <h2>
                      users.update
                    </h2>
                  </header>
                  <div
                    class="modal-body"
                  >
                    <div
                      class="select-list"
                    >
                      <div
                        class="display-flex-center"
                      >
                        <ul
                          class="radio-toggle spacer-right"
                        >
                          <li>
                            <input
                              checked=""
                              id="filter__selected"
                              name="filter"
                              type="radio"
                              value="selected"
                            />
                            <label
                              for="filter__selected"
                            >
                              selected
                            </label>
                          </li>
                          <li>
                            <input
                              id="filter__deselected"
                              name="filter"
                              type="radio"
                              value="deselected"
                            />
                            <label
                              for="filter__deselected"
                            >
                              unselected
                            </label>
                          </li>
                          <li>
                            <input
                              id="filter__all"
                              name="filter"
                              type="radio"
                              value="all"
                            />
                            <label
                              for="filter__all"
                            >
                              all
                            </label>
                          </li>
                        </ul>
                        <div
                          class="search-box"
                          title=""
                        >
                          <input
                            aria-label="search_verb"
                            autocomplete="off"
                            class="search-box-input"
                            maxlength="100"
                            placeholder="search_verb"
                            type="search"
                            value=""
                          />
                          
                        </div>
                      </div>
                      <div
                        class="select-list-list-container spacer-top"
                      >
                        <ul
                          class="menu"
                        />
                      </div>
                    </div>
                  </div>
                  <footer
                    class="modal-foot"
                  >
                    <button
                      class="button button-link"
                      type="reset"
                    >
                      Done
                    </button>
                  </footer>
                </div>
              </div>
            </div>
          }
        >
          <ModalPortal
            ariaHideApp={true}
            bodyOpenClassName="ReactModal__Body--open"
            className="modal"
            closeTimeoutMS={0}
            contentLabel="users.update"
            defaultStyles={
              Object {
                "content": Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                },
                "overlay": Object {
                  "backgroundColor": "rgba(255, 255, 255, 0.75)",
                  "bottom": 0,
                  "left": 0,
                  "position": "fixed",
                  "right": 0,
                  "top": 0,
                },
              }
            }
            isOpen={true}
            onRequestClose={[Function]}
            overlayClassName="modal-overlay"
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {},
                "overlay": Object {},
              }
            }
          >
            <div
              className="ReactModal__Overlay ReactModal__Overlay--after-open modal-overlay"
              onClick={[Function]}
              onMouseDown={[Function]}
              style={Object {}}
            >
              <div
                aria-label="users.update"
                className="ReactModal__Content ReactModal__Content--after-open modal"
                onClick={[Function]}
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                role="dialog"
                style={Object {}}
                tabIndex="-1"
              >
                <header
                  className="modal-head"
                >
                  <h2>
                    users.update
                  </h2>
                </header>
                <div
                  className="modal-body"
                >
                  <DeferredSpinner
                    loading={true}
                    timeout={100}
                  >
                    <SelectList
                      elements={Array []}
                      onSearch={[Function]}
                      onSelect={[Function]}
                      onUnselect={[Function]}
                      renderElement={[Function]}
                      selectedElements={Array []}
                    >
                      <div
                        className="select-list"
                      >
                        <div
                          className="display-flex-center"
                        >
                          <RadioToggle
                            className="spacer-right"
                            disabled={false}
                            name="filter"
                            onCheck={[Function]}
                            options={
                              Array [
                                Object {
                                  "disabled": false,
                                  "label": "selected",
                                  "value": "selected",
                                },
                                Object {
                                  "disabled": false,
                                  "label": "unselected",
                                  "value": "deselected",
                                },
                                Object {
                                  "disabled": false,
                                  "label": "all",
                                  "value": "all",
                                },
                              ]
                            }
                            value="selected"
                          >
                            <ul
                              className="radio-toggle spacer-right"
                            >
                              <li
                                key="selected"
                              >
                                <input
                                  checked={true}
                                  disabled={false}
                                  id="filter__selected"
                                  name="filter"
                                  onChange={[Function]}
                                  type="radio"
                                  value="selected"
                                />
                                <Tooltip>
                                  <label
                                    htmlFor="filter__selected"
                                  >
                                    selected
                                  </label>
                                </Tooltip>
                              </li>
                              <li
                                key="deselected"
                              >
                                <input
                                  checked={false}
                                  disabled={false}
                                  id="filter__deselected"
                                  name="filter"
                                  onChange={[Function]}
                                  type="radio"
                                  value="deselected"
                                />
                                <Tooltip>
                                  <label
                                    htmlFor="filter__deselected"
                                  >
                                    unselected
                                  </label>
                                </Tooltip>
                              </li>
                              <li
                                key="all"
                              >
                                <input
                                  checked={false}
                                  disabled={false}
                                  id="filter__all"
                                  name="filter"
                                  onChange={[Function]}
                                  type="radio"
                                  value="all"
                                />
                                <Tooltip>
                                  <label
                                    htmlFor="filter__all"
                                  >
                                    all
                                  </label>
                                </Tooltip>
                              </li>
                            </ul>
                          </RadioToggle>
                          <SearchBox
                            autoFocus={true}
                            loading={false}
                            onChange={[Function]}
                            placeholder="search_verb"
                            value=""
                          >
                            <div
                              className="search-box"
                              title=""
                            >
                              <input
                                aria-label="search_verb"
                                autoComplete="off"
                                autoFocus={true}
                                className="search-box-input"
                                maxLength={100}
                                onChange={[Function]}
                                onKeyDown={[Function]}
                                placeholder="search_verb"
                                type="search"
                                value=""
                              />
                              <DeferredSpinner
                                loading={false}
                                timeout={100}
                              >
                                <MOCKSearchIcon
                                  className="search-box-magnifier"
                                />
                              </DeferredSpinner>
                            </div>
                          </SearchBox>
                        </div>
                        <SelectListListContainer
                          disabledElements={Array []}
                          elements={Array []}
                          filter="selected"
                          onSelect={[Function]}
                          onUnselect={[Function]}
                          renderElement={[Function]}
                          selectedElements={Array []}
                        >
                          <div
                            className="select-list-list-container spacer-top"
                          >
                            <ul
                              className="menu"
                            />
                          </div>
                        </SelectListListContainer>
                      </div>
                    </SelectList>
                  </DeferredSpinner>
                </div>
                <footer
                  className="modal-foot"
                >
                  <ResetButtonLink
                    onClick={[Function]}
                  >
                    <ButtonLink
                      onClick={[Function]}
                      type="reset"
                    >
                      <Button
                        className="button-link"
                        onClick={[Function]}
                        type="reset"
                      >
                        <button
                          className="button button-link"
                          onClick={[Function]}
                          type="reset"
                        >
                          Done
                        </button>
                      </Button>
                    </ButtonLink>
                  </ResetButtonLink>
                </footer>
              </div>
            </div>
          </ModalPortal>
        </Portal>
      </Modal>
    </Modal>
  </EditMembers>
</EditMembers>
`;

exports[`should edit members 3`] = `
<EditMembers
  group={
    Object {
      "id": 3,
      "membersCount": 5,
      "name": "Foo",
    }
  }
  onEdit={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  organization="org"
>
  <ButtonIcon
    className="button-small"
    onClick={[Function]}
  >
    <Button
      className="button-small button-icon"
      onClick={[Function]}
      stopPropagation={true}
      style={
        Object {
          "color": "#236a97",
        }
      }
    >
      <button
        className="button button-small button-icon"
        onClick={[Function]}
        style={
          Object {
            "color": "#236a97",
          }
        }
        type="button"
      >
        <MOCKBulletListIcon />
      </button>
    </Button>
  </ButtonIcon>
</EditMembers>
`;
